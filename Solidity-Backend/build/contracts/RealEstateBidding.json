{
  "contractName": "RealEstateBidding",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "propID",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"propID\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"token.uri/123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"\\\" | \\\"token.uri/<tokenId>\\\" |=== Requirements: - `tokenId` must exist.\"},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/RealEstateBidding.sol\":\"RealEstateBidding\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/ERC721.sol\":{\"keccak256\":\"0x0984ab4a0743b54c17471bb82976bb0a8c135728f5b9da74a0be0f0a4497bab7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac788ebfaec660452ead0426d72dfc5a2edc584025caa2b1816908b8b461f9bb\",\"dweb:/ipfs/Qma7iRTyK5rWpaZYfqBLSzQZEKsxyxDjfxZY8YcSLkjHsL\"]},\"/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/RealEstateBidding.sol\":{\"keccak256\":\"0xcde166f5d81d1993ec910e40926e3fb68e91cdedaa1a73aa841bee278f2dcf34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://631ec613cf82d79ae577621a8fb72ffa0355d2d9e65c25844315e5fd446468d9\",\"dweb:/ipfs/QmTbyXEBYz7wwMwDbT2TWveNC7QPVWjWm7SRkRyPvh9MGg\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636352211e116100a2578063a0712d6811610071578063a0712d6814610629578063a22cb46514610657578063b88d4fde146106a7578063c87b56dd146107ac578063e985e9c51461085357610116565b80636352211e1461045d5780636c0360eb146104cb57806370a082311461054e57806395d89b41146105a657610116565b806318160ddd116100e957806318160ddd146102bf57806323b872dd146102dd5780632f745c591461034b57806342842e0e146103ad5780634f6ccce71461041b57610116565b806301ffc9a71461011b57806306fdde0314610180578063081812fc14610203578063095ea7b314610271575b600080fd5b6101666004803603602081101561013157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506108cf565b604051808215151515815260200191505060405180910390f35b610188610936565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61022f6004803603602081101561021957600080fd5b81019080803590602001909291905050506109d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102bd6004803603604081101561028757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a73565b005b6102c7610bb7565b6040518082815260200191505060405180910390f35b610349600480360360608110156102f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc8565b005b6103976004803603604081101561036157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c3e565b6040518082815260200191505060405180910390f35b610419600480360360608110156103c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c99565b005b6104476004803603602081101561043157600080fd5b8101908080359060200190929190505050610cb9565b6040518082815260200191505060405180910390f35b6104896004803603602081101561047357600080fd5b8101908080359060200190929190505050610cdc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104d3610d13565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105135780820151818401526020810190506104f8565b50505050905090810190601f1680156105405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105906004803603602081101561056457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610db5565b6040518082815260200191505060405180910390f35b6105ae610e8a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ee5780820151818401526020810190506105d3565b50505050905090810190601f16801561061b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106556004803603602081101561063f57600080fd5b8101908080359060200190929190505050610f2c565b005b6106a56004803603604081101561066d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610f39565b005b6107aa600480360360808110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561072457600080fd5b82018360208201111561073657600080fd5b8035906020019184600183028401116401000000008311171561075857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110f1565b005b6107d8600480360360208110156107c257600080fd5b8101908080359060200190929190505050611169565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108185780820151818401526020810190506107fd565b50505050905090810190601f1680156108455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108b56004803603604081101561086957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611452565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b5050505050905090565b60006109e3826114e6565b610a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612730602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a7e82610cdc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806127b46021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b24611503565b73ffffffffffffffffffffffffffffffffffffffff161480610b535750610b5281610b4d611503565b611452565b5b610ba8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806126836038913960400191505060405180910390fd5b610bb2838361150b565b505050565b6000610bc360026115c4565b905090565b610bd9610bd3611503565b826115d9565b610c2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127d56031913960400191505060405180910390fd5b610c398383836116cd565b505050565b6000610c9182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061191090919063ffffffff16565b905092915050565b610cb4838383604051806020016040528060008152506110f1565b505050565b600080610cd083600261192a90919063ffffffff16565b50905080915050919050565b6000610d0c826040518060600160405280602981526020016126e56029913960026119599092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dab5780601f10610d8057610100808354040283529160200191610dab565b820191906000526020600020905b815481529060010190602001808311610d8e57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806126bb602a913960400191505060405180910390fd5b610e83600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611978565b9050919050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f225780601f10610ef757610100808354040283529160200191610f22565b820191906000526020600020905b815481529060010190602001808311610f0557829003601f168201915b5050505050905090565b610f36338261198d565b50565b610f41611503565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060056000610fef611503565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661109c611503565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6111026110fc611503565b836115d9565b611157576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127d56031913960400191505060405180910390fd5b61116384848484611b81565b50505050565b6060611174826114e6565b6111c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612785602f913960400191505060405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112725780601f1061124757610100808354040283529160200191611272565b820191906000526020600020905b81548152906001019060200180831161125557829003601f168201915b505050505090506000600980546001816001161561010002031660029004905014156112a1578091505061144d565b60008151111561137a57600981604051602001808380546001816001161561010002031660029004801561130c5780601f106112ea57610100808354040283529182019161130c565b820191906000526020600020905b8154815290600101906020018083116112f8575b505082805190602001908083835b6020831061133d578051825260208201915060208101905060208303925061131a565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061144d565b600961138584611bf3565b60405160200180838054600181600116156101000203166002900480156113e35780601f106113c15761010080835404028352918201916113e3565b820191906000526020600020905b8154815290600101906020018083116113cf575b505082805190602001908083835b6020831061141457805182526020820191506020810190506020830392506113f1565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006114fc826002611d3a90919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661157e83610cdc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006115d282600001611d54565b9050919050565b60006115e4826114e6565b611639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612657602c913960400191505060405180910390fd5b600061164483610cdc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116b357508373ffffffffffffffffffffffffffffffffffffffff1661169b846109d8565b73ffffffffffffffffffffffffffffffffffffffff16145b806116c457506116c38185611452565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166116ed82610cdc565b73ffffffffffffffffffffffffffffffffffffffff1614611759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061275c6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806126336024913960400191505060405180910390fd5b6117ea838383611d65565b6117f560008261150b565b61184681600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d6a90919063ffffffff16565b5061189881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d8490919063ffffffff16565b506118af81836002611d9e9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061191f8360000183611dd3565b60001c905092915050565b60008060008061193d8660000186611e56565b915091508160001c8160001c8090509350935050509250929050565b600061196c846000018460001b84611eef565b60001c90509392505050565b600061198682600001611fe5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a30576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b611a39816114e6565b15611aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b611ab860008383611d65565b611b0981600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d8490919063ffffffff16565b50611b2081836002611d9e9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b611b8c8484846116cd565b611b9884848484611ff6565b611bed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806126016032913960400191505060405180910390fd5b50505050565b60606000821415611c3b576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611d35565b600082905060005b60008214611c65578080600101915050600a8281611c5d57fe5b049150611c43565b60608167ffffffffffffffff81118015611c7e57600080fd5b506040519080825280601f01601f191660200182016040528015611cb15781602001600182028036833780820191505090505b50905060006001830390508593505b60008414611d2d57600a8481611cd257fe5b0660300160f81b82828060019003935081518110611cec57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8481611d2557fe5b049350611cc0565b819450505050505b919050565b6000611d4c836000018360001b612319565b905092915050565b600081600001805490509050919050565b505050565b6000611d7c836000018360001b61233c565b905092915050565b6000611d96836000018360001b612424565b905092915050565b6000611dca846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b612494565b90509392505050565b600081836000018054905011611e34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806125df6022913960400191505060405180910390fd5b826000018281548110611e4357fe5b9060005260206000200154905092915050565b60008082846000018054905011611eb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061270e6022913960400191505060405180910390fd5b6000846000018481548110611ec957fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390611fb6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f7b578082015181840152602081019050611f60565b50505050905090810190601f168015611fa85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000016001820381548110611fc957fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006120178473ffffffffffffffffffffffffffffffffffffffff16612570565b6120245760019050612311565b600060608573ffffffffffffffffffffffffffffffffffffffff1663150b7a0260e01b61204f611503565b898888604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120ff5780820151818401526020810190506120e4565b50505050905090810190601f16801561212c5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106121c457805182526020820191506020810190506020830392506121a1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612226576040519150601f19603f3d011682016040523d82523d6000602084013e61222b565b606091505b509150915081612299576000815111156122485780518082602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806126016032913960400191505060405180910390fd5b60008180602001905160208110156122b057600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161493505050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612418576000600182039050600060018660000180549050039050600086600001828154811061238757fe5b90600052602060002001549050808760000184815481106123a457fe5b90600052602060002001819055506001830187600101600083815260200190815260200160002081905550866000018054806123dc57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061241e565b60009150505b92915050565b600061243083836125bb565b61248957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061248e565b600090505b92915050565b600080846001016000858152602001908152602001600020549050600081141561253b57846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050612569565b8285600001600183038154811061254e57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91508082141580156125b257506000801b8214155b92505050919050565b60008083600101600084815260200190815260200160002054141590509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a26469706673582212200ac9b5d7f2468ae760f75465bc402a00b9e6016ccd9a358d81f9b867f184140164736f6c634300060a0033",
  "immutableReferences": {},
  "sourceMap": "81:188:2:-:0;;;124:58;;;;;;;;;;39136:365:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10090:40;9757:10;10109:20;;10090:18;;;:40;;:::i;:::-;39216:4;39208:5;:12;;;;;;;;;;;;:::i;:::-;;39240:6;39230:7;:16;;;;;;;;;;;;:::i;:::-;;39334:40;38414:10;39353:20;;39334:18;;;:40;;:::i;:::-;39384:49;38746:10;39403:29;;39384:18;;;:49;;:::i;:::-;39443:51;39119:10;39462:31;;39443:18;;;:51;;:::i;:::-;39136:365;;81:188:2;;10821:198:0;10919:10;10904:25;;:11;:25;;;;;10896:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11008:4;10972:20;:33;10993:11;10972:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;10821:198;:::o;81:188:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "81:188:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10287:140:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;40407:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45067:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;44401:381;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43281:200;;;:::i;:::-;;;;;;;;;;;;;;;;;;;46778:300;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;42976:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;47727:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43819:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;40135:167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;42515:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39705:211;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;40606:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;188:79:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;45575:290:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;48599:282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;41543:740;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46187:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10287:140;10364:4;10387:20;:33;10408:11;10387:33;;;;;;;;;;;;;;;;;;;;;;;;;;;10380:40;;10287:140;;;:::o;40407:90::-;40453:13;40485:5;40478:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40407:90;:::o;45067:209::-;45135:7;45162:16;45170:7;45162;:16::i;:::-;45154:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45245:15;:24;45261:7;45245:24;;;;;;;;;;;;;;;;;;;;;45238:31;;45067:209;;;:::o;44401:381::-;44481:13;44497:16;44505:7;44497;:16::i;:::-;44481:32;;44537:5;44531:11;;:2;:11;;;;44523:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44615:5;44599:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;44624:37;44641:5;44648:12;:10;:12::i;:::-;44624:16;:37::i;:::-;44599:62;44591:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44754:21;44763:2;44767:7;44754:8;:21::i;:::-;44401:381;;;:::o;43281:200::-;43334:7;43453:21;:12;:19;:21::i;:::-;43446:28;;43281:200;:::o;46778:300::-;46937:41;46956:12;:10;:12::i;:::-;46970:7;46937:18;:41::i;:::-;46929:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47043:28;47053:4;47059:2;47063:7;47043:9;:28::i;:::-;46778:300;;;:::o;42976:152::-;43065:7;43091:30;43115:5;43091:13;:20;43105:5;43091:20;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;43084:37;;42976:152;;;;:::o;47727:149::-;47830:39;47847:4;47853:2;47857:7;47830:39;;;;;;;;;;;;:16;:39::i;:::-;47727:149;;;:::o;43819:161::-;43886:7;43906:15;43927:22;43943:5;43927:12;:15;;:22;;;;:::i;:::-;43905:44;;;43966:7;43959:14;;;43819:161;;;:::o;40135:167::-;40199:7;40225:70;40242:7;40225:70;;;;;;;;;;;;;;;;;:12;:16;;:70;;;;;:::i;:::-;40218:77;;40135:167;;;:::o;42515:87::-;42555:13;42587:8;42580:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42515:87;:::o;39705:211::-;39769:7;39813:1;39796:19;;:5;:19;;;;39788:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39880:29;:13;:20;39894:5;39880:20;;;;;;;;;;;;;;;:27;:29::i;:::-;39873:36;;39705:211;;;:::o;40606:94::-;40654:13;40686:7;40679:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40606:94;:::o;188:79:2:-;235:25;241:10;253:6;235:5;:25::i;:::-;188:79;:::o;45575:290:0:-;45689:12;:10;:12::i;:::-;45677:24;;:8;:24;;;;45669:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45787:8;45742:18;:32;45761:12;:10;:12::i;:::-;45742:32;;;;;;;;;;;;;;;:42;45775:8;45742:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;45839:8;45810:48;;45825:12;:10;:12::i;:::-;45810:48;;;45849:8;45810:48;;;;;;;;;;;;;;;;;;;;;;45575:290;;:::o;48599:282::-;48730:41;48749:12;:10;:12::i;:::-;48763:7;48730:18;:41::i;:::-;48722:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48835:39;48849:4;48855:2;48859:7;48868:5;48835:13;:39::i;:::-;48599:282;;;;:::o;41543:740::-;41608:13;41641:16;41649:7;41641;:16::i;:::-;41633:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41720:23;41746:10;:19;41757:7;41746:19;;;;;;;;;;;41720:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41864:1;41844:8;41838:22;;;;;;;;;;;;;;;;:27;41834:74;;;41888:9;41881:16;;;;;41834:74;42036:1;42016:9;42010:23;:27;42006:110;;;42084:8;42094:9;42067:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42053:52;;;;;42006:110;42246:8;42256:18;:7;:16;:18::i;:::-;42229:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42215:61;;;41543:740;;;;:::o;46187:154::-;46276:4;46299:18;:25;46318:5;46299:25;;;;;;;;;;;;;;;:35;46325:8;46299:35;;;;;;;;;;;;;;;;;;;;;;;;;46292:42;;46187:154;;;;:::o;50050:117::-;50107:4;50130:30;50152:7;50130:12;:21;;:30;;;;:::i;:::-;50123:37;;50050:117;;;:::o;819:104::-;872:15;906:10;899:17;;819:104;:::o;57074:155::-;57166:2;57139:15;:24;57155:7;57139:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;57214:7;57210:2;57183:39;;57192:16;57200:7;57192;:16::i;:::-;57183:39;;;;;;;;;;;;57074:155;;:::o;33778:121::-;33847:7;33873:19;33881:3;:10;;33873:7;:19::i;:::-;33866:26;;33778:121;;;:::o;50528:329::-;50613:4;50637:16;50645:7;50637;:16::i;:::-;50629:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50712:13;50728:16;50736:7;50728;:16::i;:::-;50712:32;;50773:5;50762:16;;:7;:16;;;:51;;;;50806:7;50782:31;;:20;50794:7;50782:11;:20::i;:::-;:31;;;50762:51;:87;;;;50817:32;50834:5;50841:7;50817:16;:32::i;:::-;50762:87;50754:96;;;50528:329;;;;:::o;54040:559::-;54157:4;54137:24;;:16;54145:7;54137;:16::i;:::-;:24;;;54129:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54239:1;54225:16;;:2;:16;;;;54217:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54293:39;54314:4;54320:2;54324:7;54293:20;:39::i;:::-;54394:29;54411:1;54415:7;54394:8;:29::i;:::-;54434:35;54461:7;54434:13;:19;54448:4;54434:19;;;;;;;;;;;;;;;:26;;:35;;;;:::i;:::-;;54479:30;54501:7;54479:13;:17;54493:2;54479:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;54520:29;54537:7;54546:2;54520:12;:16;;:29;;;;;:::i;:::-;;54584:7;54580:2;54565:27;;54574:4;54565:27;;;;;;;;;;;;54040:559;;;:::o;26590:135::-;26661:7;26695:22;26699:3;:10;;26711:5;26695:3;:22::i;:::-;26687:31;;26680:38;;26590:135;;;;:::o;34227:224::-;34307:7;34316;34336:11;34349:13;34366:22;34370:3;:10;;34382:5;34366:3;:22::i;:::-;34335:53;;;;34414:3;34406:12;;34436:5;34428:14;;34398:46;;;;;;;;;34227:224;;;;;:::o;34870:202::-;34977:7;35019:44;35024:3;:10;;35044:3;35036:12;;35050;35019:4;:44::i;:::-;35011:53;;34996:69;;34870:202;;;;;:::o;26146:112::-;26206:7;26232:19;26240:3;:10;;26232:7;:19::i;:::-;26225:26;;26146:112;;;:::o;52587:393::-;52680:1;52666:16;;:2;:16;;;;52658:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52738:16;52746:7;52738;:16::i;:::-;52737:17;52729:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52798:45;52827:1;52831:2;52835:7;52798:20;:45::i;:::-;52854:30;52876:7;52854:13;:17;52868:2;52854:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;52895:29;52912:7;52921:2;52895:12;:16;;:29;;;;;:::i;:::-;;52965:7;52961:2;52940:33;;52957:1;52940:33;;;;;;;;;;;;52587:393;;:::o;49586:269::-;49699:28;49709:4;49715:2;49719:7;49699:9;:28::i;:::-;49745:48;49768:4;49774:2;49778:7;49787:5;49745:22;:48::i;:::-;49737:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49586:269;;;;:::o;35298:723::-;35354:13;35580:1;35571:5;:10;35567:51;;;35597:10;;;;;;;;;;;;;;;;;;;;;35567:51;35627:12;35642:5;35627:20;;35657:14;35681:75;35696:1;35688:4;:9;35681:75;;35713:8;;;;;;;35743:2;35735:10;;;;;;;;;35681:75;;;35765:19;35797:6;35787:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35765:39;;35814:13;35839:1;35830:6;:10;35814:26;;35857:5;35850:12;;35872:112;35887:1;35879:4;:9;35872:112;;35945:2;35938:4;:9;;;;;;35933:2;:14;35922:27;;35904:6;35911:7;;;;;;;35904:15;;;;;;;;;;;:45;;;;;;;;;;;35971:2;35963:10;;;;;;;;;35872:112;;;36007:6;35993:21;;;;;;35298:723;;;;:::o;33546:149::-;33630:4;33653:35;33663:3;:10;;33683:3;33675:12;;33653:9;:35::i;:::-;33646:42;;33546:149;;;;:::o;31238:108::-;31294:7;31320:3;:12;;:19;;;;31313:26;;31238:108;;;:::o;57785:93::-;;;;:::o;25705:135::-;25775:4;25798:35;25806:3;:10;;25826:5;25818:14;;25798:7;:35::i;:::-;25791:42;;25705:135;;;;:::o;25408:129::-;25475:4;25498:32;25503:3;:10;;25523:5;25515:14;;25498:4;:32::i;:::-;25491:39;;25408:129;;;;:::o;32994:174::-;33083:4;33106:55;33111:3;:10;;33131:3;33123:12;;33153:5;33145:14;;33137:23;;33106:4;:55::i;:::-;33099:62;;32994:174;;;;;:::o;23364:201::-;23431:7;23479:5;23458:3;:11;;:18;;;;:26;23450:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23540:3;:11;;23552:5;23540:18;;;;;;;;;;;;;;;;23533:25;;23364:201;;;;:::o;31689:274::-;31756:7;31765;31814:5;31792:3;:12;;:19;;;;:27;31784:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31869:22;31894:3;:12;;31907:5;31894:19;;;;;;;;;;;;;;;;;;31869:44;;31931:5;:10;;;31943:5;:12;;;31923:33;;;;;31689:274;;;;;:::o;32370:315::-;32464:7;32483:16;32502:3;:12;;:17;32515:3;32502:17;;;;;;;;;;;;32483:36;;32549:1;32537:8;:13;;32552:12;32529:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32618:3;:12;;32642:1;32631:8;:12;32618:26;;;;;;;;;;;;;;;;;;:33;;;32611:40;;;32370:315;;;;;:::o;22925:107::-;22981:7;23007:3;:11;;:18;;;;23000:25;;22925:107;;;:::o;56018:1050::-;56138:4;56163:15;:2;:13;;;:15::i;:::-;56158:58;;56201:4;56194:11;;;;56158:58;56285:12;56299:23;56326:2;:7;;56370:45;;;56429:12;:10;:12::i;:::-;56455:4;56473:7;56494:5;56334:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56326:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56284:226;;;;56525:7;56520:542;;56572:1;56552:10;:17;:21;56548:376;;;56717:10;56711:17;56777:15;56764:10;56760:2;56756:19;56749:44;56666:145;56849:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56520:542;56954:13;56981:10;56970:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56954:48;;36752:10;57034:16;;57024:26;;;:6;:26;;;;57016:35;;;;;56018:1050;;;;;;;:::o;31025:123::-;31096:4;31140:1;31119:3;:12;;:17;31132:3;31119:17;;;;;;;;;;;;:22;;31112:29;;31025:123;;;;:::o;21124:1512::-;21190:4;21306:18;21327:3;:12;;:19;21340:5;21327:19;;;;;;;;;;;;21306:40;;21375:1;21361:10;:15;21357:1273;;21718:21;21755:1;21742:10;:14;21718:38;;21770:17;21811:1;21790:3;:11;;:18;;;;:22;21770:42;;22052:17;22072:3;:11;;22084:9;22072:22;;;;;;;;;;;;;;;;22052:42;;22215:9;22186:3;:11;;22198:13;22186:26;;;;;;;;;;;;;;;:38;;;;22332:1;22316:13;:17;22290:3;:12;;:23;22303:9;22290:23;;;;;;;;;;;:43;;;;22439:3;:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;22531:3;:12;;:19;22544:5;22531:19;;;;;;;;;;;22524:26;;;22572:4;22565:11;;;;;;;;21357:1273;22614:5;22607:12;;;21124:1512;;;;;:::o;20552:404::-;20615:4;20636:21;20646:3;20651:5;20636:9;:21::i;:::-;20631:319;;20673:3;:11;;20690:5;20673:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20853:3;:11;;:18;;;;20831:3;:12;;:19;20844:5;20831:19;;;;;;;;;;;:40;;;;20892:4;20885:11;;;;20631:319;20934:5;20927:12;;20552:404;;;;;:::o;28583:678::-;28659:4;28773:16;28792:3;:12;;:17;28805:3;28792:17;;;;;;;;;;;;28773:36;;28836:1;28824:8;:13;28820:435;;;28890:3;:12;;28908:38;;;;;;;;28925:3;28908:38;;;;28938:5;28908:38;;;28890:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29102:3;:12;;:19;;;;29082:3;:12;;:17;29095:3;29082:17;;;;;;;;;;;:39;;;;29142:4;29135:11;;;;;28820:435;29213:5;29177:3;:12;;29201:1;29190:8;:12;29177:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;29239:5;29232:12;;;28583:678;;;;;;:::o;16993:610::-;17053:4;17311:16;17337:19;17359:66;17337:88;;;;17526:7;17514:20;17502:32;;17565:11;17553:8;:23;;:42;;;;;17592:3;17580:15;;:8;:15;;17553:42;17545:51;;;;16993:610;;;:::o;22717:127::-;22790:4;22836:1;22813:3;:12;;:19;22826:5;22813:19;;;;;;;;;;;;:24;;22806:31;;22717:127;;;;:::o",
  "source": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./ERC721.sol\";\n\ncontract RealEstateBidding is ERC721 {\n    constructor() public ERC721(\"RealEstateBidding\", \"REB\") {}\n\n    function mint(uint256 propID) public {\n        _mint(msg.sender, propID);\n    }\n}\n",
  "sourcePath": "C:\\Users\\majid\\Desktop\\GBC\\Design Patterns for Blockchain\\Group Assignment\\RealState-Bidding-DAPP\\Solidity-Backend\\contracts\\RealEstateBidding.sol",
  "ast": {
    "absolutePath": "/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/RealEstateBidding.sol",
    "exportedSymbols": {
      "RealEstateBidding": [
        2468
      ]
    },
    "id": 2469,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2444,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:2"
      },
      {
        "absolutePath": "/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2445,
        "nodeType": "ImportDirective",
        "scope": 2469,
        "sourceUnit": 2406,
        "src": "57:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2446,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2405,
              "src": "111:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2405",
                "typeString": "contract ERC721"
              }
            },
            "id": 2447,
            "nodeType": "InheritanceSpecifier",
            "src": "111:6:2"
          }
        ],
        "contractDependencies": [
          26,
          37,
          151,
          176,
          205,
          277,
          2405
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2468,
        "linearizedBaseContracts": [
          2468,
          2405,
          205,
          176,
          151,
          277,
          37,
          26
        ],
        "name": "RealEstateBidding",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2454,
              "nodeType": "Block",
              "src": "180:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 2455,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "5265616c45737461746542696464696e67",
                    "id": 2450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "152:19:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_2d233dcb5148e56bf5bf2735b0794862a526b9d49adf3f694e78322078d25712",
                      "typeString": "literal_string \"RealEstateBidding\""
                    },
                    "value": "RealEstateBidding"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524542",
                    "id": 2451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "173:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_afb2ef8b038b3c8ed16b9e643dd2dd7ef66109104b0cadb182b90da2802c563a",
                      "typeString": "literal_string \"REB\""
                    },
                    "value": "REB"
                  }
                ],
                "id": 2452,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2449,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2405,
                  "src": "145:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2405_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "145:34:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2448,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "135:2:2"
            },
            "returnParameters": {
              "id": 2453,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "180:0:2"
            },
            "scope": 2468,
            "src": "124:58:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2466,
              "nodeType": "Block",
              "src": "225:42:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2461,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "241:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "241:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2463,
                        "name": "propID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2457,
                        "src": "253:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2460,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2123,
                      "src": "235:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "235:25:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2465,
                  "nodeType": "ExpressionStatement",
                  "src": "235:25:2"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a0712d68",
            "id": 2467,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2457,
                  "mutability": "mutable",
                  "name": "propID",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2467,
                  "src": "202:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2456,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "202:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "201:16:2"
            },
            "returnParameters": {
              "id": 2459,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "225:0:2"
            },
            "scope": 2468,
            "src": "188:79:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 2469,
        "src": "81:188:2"
      }
    ],
    "src": "32:238:2"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/RealEstateBidding.sol",
    "exportedSymbols": {
      "RealEstateBidding": [
        2468
      ]
    },
    "id": 2469,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2444,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:2"
      },
      {
        "absolutePath": "/C/Users/majid/Desktop/GBC/Design Patterns for Blockchain/Group Assignment/RealState-Bidding-DAPP/Solidity-Backend/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2445,
        "nodeType": "ImportDirective",
        "scope": 2469,
        "sourceUnit": 2406,
        "src": "57:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2446,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2405,
              "src": "111:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2405",
                "typeString": "contract ERC721"
              }
            },
            "id": 2447,
            "nodeType": "InheritanceSpecifier",
            "src": "111:6:2"
          }
        ],
        "contractDependencies": [
          26,
          37,
          151,
          176,
          205,
          277,
          2405
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2468,
        "linearizedBaseContracts": [
          2468,
          2405,
          205,
          176,
          151,
          277,
          37,
          26
        ],
        "name": "RealEstateBidding",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2454,
              "nodeType": "Block",
              "src": "180:2:2",
              "statements": []
            },
            "documentation": null,
            "id": 2455,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "5265616c45737461746542696464696e67",
                    "id": 2450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "152:19:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_2d233dcb5148e56bf5bf2735b0794862a526b9d49adf3f694e78322078d25712",
                      "typeString": "literal_string \"RealEstateBidding\""
                    },
                    "value": "RealEstateBidding"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524542",
                    "id": 2451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "173:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_afb2ef8b038b3c8ed16b9e643dd2dd7ef66109104b0cadb182b90da2802c563a",
                      "typeString": "literal_string \"REB\""
                    },
                    "value": "REB"
                  }
                ],
                "id": 2452,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2449,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2405,
                  "src": "145:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2405_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "145:34:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2448,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "135:2:2"
            },
            "returnParameters": {
              "id": 2453,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "180:0:2"
            },
            "scope": 2468,
            "src": "124:58:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2466,
              "nodeType": "Block",
              "src": "225:42:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2461,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "241:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "241:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2463,
                        "name": "propID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2457,
                        "src": "253:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2460,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2123,
                      "src": "235:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "235:25:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2465,
                  "nodeType": "ExpressionStatement",
                  "src": "235:25:2"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a0712d68",
            "id": 2467,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2457,
                  "mutability": "mutable",
                  "name": "propID",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2467,
                  "src": "202:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2456,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "202:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "201:16:2"
            },
            "returnParameters": {
              "id": 2459,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "225:0:2"
            },
            "scope": 2468,
            "src": "188:79:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 2469,
        "src": "81:188:2"
      }
    ],
    "src": "32:238:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.10+commit.00c0fcaf.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x0d210fb78f0c47E9967286dCB0fb64488563B37b",
      "transactionHash": "0x7c6b4ade2bf438827307dc0407a774398e1d6ad02e6954f03db6e436c70e7596"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-06-17T09:04:12.647Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \"\" | \"\" | \"\" | \"\" | \"token.uri/123\" | \"token.uri/123\" | \"token.uri/\" | \"123\" | \"token.uri/123\" | \"token.uri/\" | \"\" | \"token.uri/<tokenId>\" |=== Requirements: - `tokenId` must exist."
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}